---
description: Supabaseマイグレーションとデータベースパターン（日本語版）
globs: *.sql,supabase/migrations/*.sql
---

# Supabase マイグレーションパターン

## マイグレーションファイル命名規則

マイグレーションファイルは以下のパターンに従います: `YYYYMMDDHHMMSS_description.sql`
- 新しいマイグレーションには現在の日時を使用
- 例: `20251002000000_create_connector_app_filters.sql`

## テーブル構造パターン

### 標準フィールド
すべてのテーブルに含めるべきフィールド:
```sql
"id" uuid NOT NULL DEFAULT gen_random_uuid(),
"created_at" timestamp with time zone DEFAULT now(),
"updated_at" timestamp with time zone DEFAULT now()
```

### RLSポリシー
テナントベースのアクセス制御を使用:
```sql
CREATE POLICY "Users can access [table] for their tenant" ON "public"."[table]"
    FOR ALL USING (
        "connector_id" IN (
            SELECT "id" FROM "connectors" 
            WHERE "tenant_id" IN (
                SELECT "tenant_id" FROM "user_tenants" 
                WHERE "user_id" = auth.uid() AND "status" = 'active'
            )
        )
    );
```

### 必須コンポーネント
1. **主キー**: `ADD CONSTRAINT "[table]_pkey" PRIMARY KEY USING INDEX "[table]_pkey"`
2. **外部キー**: 親テーブルを`ON DELETE CASCADE`で参照
3. **インデックス**: 頻繁にクエリされるカラムにインデックスを作成
4. **トリガー**: `updated_at`用に`update_updated_at_column()`トリガーを追加
5. **権限**: `anon`, `authenticated`, `service_role`に権限を付与
6. **コメント**: テーブルとカラムのコメントを追加してドキュメント化

## マイグレーションコマンド

- **ローカル開発**: `npx supabase db reset` (リセットしてすべてのマイグレーションを適用)
- **ローカル増分**: `npx supabase migration up` (新しいマイグレーションのみ適用)
- **本番環境**: `npx supabase db push` (リモートSupabaseに適用)

## 共通パターン

### 外部キー参照
```sql
ALTER TABLE "public"."child_table" 
    ADD CONSTRAINT "child_table_parent_id_fkey" 
    FOREIGN KEY ("parent_id") REFERENCES "public"."parent_table"("id") ON DELETE CASCADE;
```

### Updated At トリガー
```sql
CREATE TRIGGER "update_[table]_updated_at"
    BEFORE UPDATE ON "public"."[table]"
    FOR EACH ROW
    EXECUTE FUNCTION "public"."update_updated_at_column"();
```

### 権限付与
```sql
GRANT [OPERATION] ON TABLE "public"."[table]" TO "[role]";
-- 操作: DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE
-- ロール: anon, authenticated, service_role
```

## 注意事項

- マイグレーションは必ずローカルでテストしてから本番に適用
- データの破壊的変更は慎重に検討
- インデックスの追加は本番環境でのパフォーマンスに影響する可能性
- RLSポリシーはセキュリティの重要な部分なので十分にテスト