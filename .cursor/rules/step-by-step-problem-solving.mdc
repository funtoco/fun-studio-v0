---
alwaysApply: true
description: 段階的な問題解決アプローチとデバッグ手法
---

# 段階的な問題解決アプローチ

## 基本原則
複雑な問題は段階的に分解して解決し、最小限の変更で問題を解決することを心がけます。

## 問題解決の手順

### 1. 現状の正確な把握
- 問題の症状を具体的に特定する
- エラーメッセージやログを詳細に確認する
- 期待される動作と実際の動作の差を明確にする

### 2. 根本原因の特定
- 表面的な症状ではなく、根本的な原因を探る
- 関連するファイルやコンポーネントを調査する
- データの流れを追跡する

### 3. 段階的な修正
- 一度に複数の変更を行わない
- 小さな変更を段階的に適用する
- 各段階で動作を確認する

### 4. 検証とテスト
- 修正後に必ず動作確認を行う
- 副作用がないか確認する
- 他の機能に影響がないか確認する

## デバッグ手法

### ログによる追跡
```typescript
// コンポーネント初期化
console.log('Component: 初期化', { state })

// データ取得開始
console.log('Data: 取得開始')
try {
  const data = await fetchData()
  console.log('Data: 取得成功', { count: data.length })
} catch (error) {
  console.error('Data: 取得エラー', error)
} finally {
  console.log('Data: 取得完了')
}
```

### 段階的な問題切り分け
1. **コンポーネントレベル**: コンポーネントが正しくレンダリングされているか
2. **データレベル**: データが正しく取得されているか
3. **状態レベル**: 状態が正しく更新されているか
4. **レンダリングレベル**: データが正しく表示されているか

## よくある問題パターン

### 1. 無限ループ
```typescript
// ❌ 悪い例: 依存関係に毎回新しく作成される関数
useEffect(() => {
  fetchData()
}, [fetchData]) // fetchDataが毎回新しく作成される

// ✅ 良い例: useCallbackでメモ化
const fetchData = useCallback(async () => {
  // データ取得処理
}, [dependencies])

useEffect(() => {
  fetchData()
}, [fetchData])
```

### 2. 初期化前アクセス
```typescript
// ❌ 悪い例: 関数が定義される前にuseEffectで参照
useEffect(() => {
  loadData() // loadDataがまだ定義されていない
}, [loadData])

const loadData = useCallback(async () => {
  // 処理
}, [])

// ✅ 良い例: 関数をuseEffectより前に定義
const loadData = useCallback(async () => {
  // 処理
}, [])

useEffect(() => {
  loadData()
}, [loadData])
```

### 3. 複雑すぎる実装
```typescript
// ❌ 悪い例: 不要に複雑なデータソースコンポーネント
<ComplexDataSource
  onDataChange={handleDataChange}
  onLoadingChange={handleLoadingChange}
  onErrorChange={handleErrorChange}
/>

// ✅ 良い例: シンプルな直接的なデータ取得
useEffect(() => {
  async function fetchData() {
    const data = await getData()
    setData(data)
  }
  fetchData()
}, [])
```

## デバッグのベストプラクティス

### 1. ログの活用
- 各段階で適切なログを出力
- エラー時は詳細な情報を記録
- 問題解決後はデバッグログを削除

### 2. 最小限の変更
- 一度に一つの問題に集中
- 既存の動作に影響を与えない
- 変更の影響範囲を最小限に抑える

### 3. 段階的な検証
- 各変更後に動作確認
- 問題が解決したか確認
- 新しい問題が発生していないか確認

## 問題解決のチェックリスト

### 問題特定
- [ ] エラーメッセージを正確に理解したか
- [ ] 期待される動作と実際の動作の差を明確にしたか
- [ ] 関連するファイルやコンポーネントを調査したか

### 原因分析
- [ ] 根本的な原因を特定したか
- [ ] データの流れを追跡したか
- [ ] 依存関係を確認したか

### 修正実装
- [ ] 最小限の変更で問題を解決したか
- [ ] 段階的に変更を適用したか
- [ ] 各段階で動作確認を行ったか

### 検証
- [ ] 修正後に動作確認を行ったか
- [ ] 副作用がないか確認したか
- [ ] 他の機能に影響がないか確認したか

## 覚えておくこと
- **段階的アプローチ**: 複雑な問題は小さく分解して解決
- **最小限の変更**: 必要最小限の変更で問題を解決
- **継続的検証**: 各段階で動作を確認
- **根本原因の特定**: 表面的な症状ではなく根本原因を解決