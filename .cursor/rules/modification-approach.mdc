---
alwaysApply: true
description: コード修正とユーザーインタラクションの標準アプローチ
---

# 修正アプローチガイドライン

## 基本原則
**ユーザーが明示的に即座の実装を要求しない限り、変更を実装する前に必ず修正計画を提示する**

## データベース操作の制限

### 絶対に実行してはいけない操作
以下のコマンドは、ユーザーが明示的に要求した場合のみ実行する：
- `npx supabase db reset` - データベースのリセット（**絶対禁止**）
- `DROP TABLE` - テーブルの削除
- `DELETE FROM` - データの一括削除
- `TRUNCATE` - テーブルの内容を全削除
- その他の破壊的なデータベース操作

**重要**: データベースリセットは既存のデータを完全に削除するため、ユーザーが明示的に「リセットして」と言った場合のみ実行する。デバッグや確認のためであっても、代替手段を提案する。

### 実行前に必ずユーザーの明示的な許可が必要な操作
- マイグレーションの実行（`npx supabase db push`）
- データベースのバックアップ
- スキーマの変更
- 本番環境への影響がある操作

### 安全に実行できる操作
- ファイルの読み取り・編集
- コードの修正・リファクタリング
- リンターエラーのチェック
- ログの確認
- テストの実行
- SQLクエリでのデータ確認（SELECT文のみ）
- マイグレーションの確認（`npx supabase migration list`など）

## 修正に必要な手順

### 1. 分析フェーズ
- 現在のコードを分析し、問題を特定する
- 根本原因と問題の範囲を理解する
- 関連ファイルと依存関係を確認する

### 2. 計画提示
明確な修正計画を提示する：

#### A. 現状分析
- 現在の状況はどうか？
- 問題や課題は何か？
- 何を変更する必要があるか？

#### B. 修正内容
- どのような具体的な変更を行うか？
- なぜこれらの変更が必要か？
- 範囲と影響は何か？

#### C. 実装アプローチ
- 具体的な手順は何か？
- どの技術やアプローチを使用するか？
- 制約や考慮事項は何か？

#### D. 代替案（該当する場合）
- 他にどのようなアプローチが可能か？
- それぞれのメリット・デメリットは何か？
- 推奨アプローチとその理由は何か？

#### E. 影響評価
- どのファイルが影響を受けるか？
- 既存機能にどのような影響があるか？
- どのようなテストが必要か？

### 3. ユーザー承認
- 明示的なユーザー承認を待ってから進行する
- ユーザーが計画を確認してから変更を実装する
- ユーザーフィードバックに基づいて計画を調整する準備をする

## 例外ケース
以下の場合のみ計画提示をスキップできる：
- ユーザーが明示的に「方針は不要」と言った場合
- ユーザーが問題を特定した後に「修正を進めてください」と言った場合
- 明らかに軽微な修正（タイポ、明らかなバグ）の場合
- 即座の対応が必要な高緊急度の場合

## 計画提示のテンプレート

```
## 修正方針

### 現状分析
- [現在の状況を説明]

### 修正内容
- [何を修正するか]
- [修正の理由]

### 実装方針
- [具体的な手順]
- [使用する技術・アプローチ]

### 代替案（該当する場合）
- [選択肢1]: [説明]
- [選択肢2]: [説明]
- **推奨**: [推奨案と理由]

### 影響範囲
- [影響を受けるファイル]
- [既存機能への影響]

この方針で実装を進めてよろしいでしょうか？
```

## ベストプラクティス

### 1. 具体的である
- 何が変更されるかについて具体的な詳細を提供する
- 関連する場合はファイル名、関数名、行番号を含める
- 技術的アプローチを明確に説明する

### 2. 代替案を考慮する
- 問題を解決する異なる方法を常に考える
- 複数の有効なアプローチがある場合は選択肢を提示する
- 特定の解決策を推奨する理由を説明する

### 3. 影響を評価する
- 変更がシステムの他の部分にどのような影響を与えるかを考慮する
- 潜在的なリスクや副作用を特定する
- テストアプローチを提案する

### 4. 透明性を保つ
- 推論を明確に説明する
- 制限や不確実性を認める
- 変更の複雑さについて正直である

## 例

### 良い計画提示
```
## 修正方針

### 現状分析
- 現在、Kintoneのドメインが `undefined` になっている
- `createSyncService` 関数でサブドメインがハードコードされている
- 実際のコネクタ設定からドメイン情報を取得していない

### 修正内容
- ハードコードされたサブドメインを実際のコネクタ設定から動的に取得する
- `kintone_config` クレデンシャルから `domain` フィールドを取得
- URLから正規表現でサブドメインを抽出

### 実装方針
1. `createSyncService` 関数内で `getCredential(connectorId, 'kintone_config')` を呼び出し
2. `configCredential.domain` からドメインURLを取得
3. 正規表現で `https://funtoco.cybozu.com` から `funtoco` を抽出
4. エラーハンドリングを追加

### 影響範囲
- `lib/sync/kintone-sync.ts` の `createSyncService` 関数のみ
- 既存の連携処理ロジックには影響なし

この方針で修正を進めてよろしいでしょうか？
```

### 悪いアプローチ（これをしない）
```
修正します。
[直接コードを変更する]
```

## 覚えておくこと
目標は、ユーザーが何が変更され、なぜ変更されるかを理解し、専門的なガイダンスを提供しながら修正プロセスをコントロールできるようにすることです。

## データベースデバッグの代替手段
データベースの問題を確認する際は、以下の順序で代替手段を提案する：
1. **SQLクエリでの確認** - `SELECT`文を使用してデータやポリシーを確認
2. **ログの確認** - アプリケーションログやエラーログを確認
3. **マイグレーション状態の確認** - `npx supabase migration list`で状態を確認
4. **アプリケーション側でのデバッグ** - コードにログを追加してデバッグ
5. **最後の手段としてリセット** - ユーザーが明示的に要求した場合のみ