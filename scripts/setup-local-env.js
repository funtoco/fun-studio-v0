#!/usr/bin/env node

/**
 * Local Supabase Environment Setup Script
 * 
 * This script automatically extracts Supabase configuration from `npx supabase status`
 * and updates the .env.local file with the correct keys that don't expire.
 * 
 * Usage: node scripts/setup-local-env.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

function getSupabaseStatus() {
  try {
    // Try JSON output first for better parsing
    const jsonOutput = execSync('npx supabase@2.40.7 status --output json', { 
      encoding: 'utf8',
      cwd: process.cwd()
    });
    return { type: 'json', data: jsonOutput };
  } catch (error) {
    try {
      // Fallback to regular output
      const output = execSync('npx supabase@2.40.7 status', { 
        encoding: 'utf8',
        cwd: process.cwd()
      });
      return { type: 'text', data: output };
    } catch (fallbackError) {
      console.error('‚ùå Failed to get Supabase status. Make sure Supabase is running with `npx supabase@2.40.7 start`');
      console.error(fallbackError.message);
      process.exit(1);
    }
  }
}

function parseSupabaseStatus(statusOutput) {
  const lines = statusOutput.split('\n');
  const config = {};
  
  for (const line of lines) {
    if (line.includes('API URL:')) {
      config.apiUrl = line.split('API URL:')[1].trim();
    } else if (line.includes('anon key:')) {
      config.anonKey = line.split('anon key:')[1].trim();
    } else if (line.includes('service_role key:')) {
      config.serviceRoleKey = line.split('service_role key:')[1].trim();
    } else if (line.includes('DB URL:')) {
      config.databaseUrl = line.split('DB URL:')[1].trim();
    } else if (line.includes('S3 Access Key:')) {
      config.s3AccessKey = line.split('S3 Access Key:')[1].trim();
    } else if (line.includes('S3 Secret Key:')) {
      config.s3SecretKey = line.split('S3 Secret Key:')[1].trim();
    } else if (line.includes('S3 Region:')) {
      config.s3Region = line.split('S3 Region:')[1].trim();
    } else if (line.includes('Publishable key:')) {
      config.publishableKey = line.split('Publishable key:')[1].trim();
    } else if (line.includes('Secret key:')) {
      config.secretKey = line.split('Secret key:')[1].trim();
    }
  }
  
  return config;
}

function parseSupabaseStatusJson(jsonOutput) {
  try {
    const data = JSON.parse(jsonOutput);
    return {
      apiUrl: data.API_URL,
      anonKey: data.ANON_KEY, // JWT format
      serviceRoleKey: data.SERVICE_ROLE_KEY, // JWT format
      publishableKey: data.PUBLISHABLE_KEY, // New format
      secretKey: data.SECRET_KEY, // New format
      databaseUrl: data.DB_URL,
      s3AccessKey: data.S3_PROTOCOL_ACCESS_KEY_ID,
      s3SecretKey: data.S3_PROTOCOL_ACCESS_KEY_SECRET,
      s3Region: data.S3_PROTOCOL_REGION
    };
  } catch (error) {
    console.error('Failed to parse JSON output:', error.message);
    return null;
  }
}

function generateEnvContent(config) {
  return `# Supabase Local Development Configuration
# These values are automatically generated by \`npx supabase@2.40.7 start\` and don't expire
# Using Supabase CLI v2.40.7 for JWT format keys (better compatibility)
# Generated at: ${new Date().toISOString()}

# Supabase URL (local)
NEXT_PUBLIC_SUPABASE_URL=${config.apiUrl}

# Supabase Anon Key (local) - JWT format for better compatibility
NEXT_PUBLIC_SUPABASE_ANON_KEY=${config.anonKey}

# Supabase Service Role Key (local) - JWT format for better compatibility
SUPABASE_SERVICE_ROLE_KEY=${config.serviceRoleKey}

# Database URL (local)
DATABASE_URL=${config.databaseUrl}

# S3 Storage (local)
S3_ACCESS_KEY=${config.s3AccessKey}
S3_SECRET_KEY=${config.s3SecretKey}
S3_REGION=${config.s3Region}
S3_HOST=127.0.0.1:54321

# Alternative API Keys (new format) - available but not used by default
# NEXT_PUBLIC_SUPABASE_ANON_KEY=${config.publishableKey}
# SUPABASE_SERVICE_ROLE_KEY=${config.secretKey}
`;
}

function updateEnvFile(config) {
  const envPath = path.join(process.cwd(), '.env.local');
  const envContent = generateEnvContent(config);
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ .env.local file updated successfully!');
    console.log('üìù Configuration:');
    console.log(`   API URL: ${config.apiUrl}`);
    console.log(`   Anon Key: ${config.anonKey.substring(0, 20)}...`);
    console.log(`   Service Role Key: ${config.serviceRoleKey.substring(0, 20)}...`);
    console.log(`   Database URL: ${config.databaseUrl}`);
  } catch (error) {
    console.error('‚ùå Failed to write .env.local file:', error.message);
    process.exit(1);
  }
}

function main() {
  console.log('üöÄ Setting up local Supabase environment...');
  console.log('üìå Using Supabase CLI v2.40.7 for JWT format keys');
  
  // Check if Supabase is running
  console.log('üì° Checking Supabase status...');
  const statusResult = getSupabaseStatus();
  
  // Parse configuration
  console.log('üîç Parsing configuration...');
  let config;
  
  if (statusResult.type === 'json') {
    config = parseSupabaseStatusJson(statusResult.data);
    if (!config) {
      console.error('‚ùå Failed to parse JSON configuration');
      process.exit(1);
    }
  } else {
    config = parseSupabaseStatus(statusResult.data);
  }
  
  // Validate required fields
  if (!config.apiUrl || !config.anonKey || !config.serviceRoleKey) {
    console.error('‚ùå Missing required configuration. Make sure Supabase is running properly.');
    console.error('Required fields:');
    console.error(`  API URL: ${config.apiUrl ? '‚úÖ' : '‚ùå'}`);
    console.error(`  Anon Key: ${config.anonKey ? '‚úÖ' : '‚ùå'}`);
    console.error(`  Service Role Key: ${config.serviceRoleKey ? '‚úÖ' : '‚ùå'}`);
    process.exit(1);
  }
  
  // Update .env.local
  console.log('üìù Updating .env.local file...');
  updateEnvFile(config);
  
  console.log('üéâ Local environment setup complete!');
  console.log('üí° You can now run your Next.js app with the correct Supabase configuration.');
  console.log('üîÑ Run this script again whenever you restart Supabase to update the keys.');
}

if (require.main === module) {
  main();
}

module.exports = { getSupabaseStatus, parseSupabaseStatus, generateEnvContent };
